document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!sessionStorage.getItem('isAdminAuthenticated')) {
        window.location.href = 'login.html';
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    let services = JSON.parse(localStorage.getItem('services')) || [];
    let feedbacks = JSON.parse(localStorage.getItem('feedback')) || [];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
    function initTabs() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabPanes = document.querySelectorAll('.tab-pane');

        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabPanes.forEach(pane => pane.classList.remove('active'));

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                const targetTab = button.dataset.tab;
                button.classList.add('active');
                document.getElementById(`${targetTab}-tab`).classList.add('active');

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∏—Å—Ç–æ—Ä–∏–∏
                if (targetTab === 'history') {
                    window.historyManager.loadHistory();
                }
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç–∑—ã–≤–æ–≤
                if (targetTab === 'feedback') {
                    loadFeedbacks();
                }
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∑–∞–ø–∏—Å–µ–π
                if (targetTab === 'bookings') {
                    loadBookings();
                }
            });
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ –∏–∑ API
    async function loadServices() {
        const response = await fetch('http://localhost:5000/api/services');
        const services = await response.json();
        const tbody = document.getElementById('services-table-body');
        tbody.innerHTML = services.map(service => `
            <tr>
                <td>${service.name}</td>
                <td>${service.base_price} —Ä—É–±.</td>
                <td>${service.category_name}</td>
                <td>
                    <button class="btn-edit" data-id="${service.id}">‚úèÔ∏è</button>
                    <button class="btn-delete" data-id="${service.id}">üóëÔ∏è</button>
                </td>
            </tr>
        `).join('');
        initDeleteButtons(services);
        initEditButtons(services);
    }

    function getCategoryName(category) {
        const categories = {
            wash: '–ú–æ–π–∫–∞',
            polish: '–ü–æ–ª–∏—Ä–æ–≤–∫–∞',
            coating: '–ü–æ–∫—Ä—ã—Ç–∏—è',
            interior: '–°–∞–ª–æ–Ω'
        };
        return categories[category] || category;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É
    function loadFeedbacks() {
        fetch('http://localhost:5000/api/feedback/json')
            .then(response => response.json())
            .then(feedbacks => {
                const feedbackTab = document.getElementById('feedback-tab');
                let table = feedbackTab.querySelector('table');
                if (!table) {
                    table = document.createElement('table');
                    table.className = 'data-table';
                    table.innerHTML = `
                        <thead>
                            <tr>
                                <th>–ò–º—è</th>
                                <th>–û—Ç–∑—ã–≤</th>
                                <th>–û—Ü–µ–Ω–∫–∞</th>
                                <th>–î–∞—Ç–∞</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                        </thead>
                        <tbody id="feedback-table-body"></tbody>
                    `;
                    feedbackTab.appendChild(table);
                }
                const tbody = table.querySelector('#feedback-table-body');
                if (!feedbacks || feedbacks.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="5">–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤</td></tr>';
                    return;
                }
                tbody.innerHTML = feedbacks.map(fb => `
                    <tr>
                        <td>${fb.customer_name || ''}</td>
                        <td>${fb.message || ''}</td>
                        <td>${fb.rating || ''}</td>
                        <td>${fb.created_at ? new Date(fb.created_at).toLocaleString() : ''}</td>
                        <td>
                            <button class="btn-delete-feedback" data-id="${fb.feedback_id}">–£–¥–∞–ª–∏—Ç—å</button>
                        </td>
                    </tr>
                `).join('');

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
                tbody.querySelectorAll('.btn-delete-feedback').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const id = this.dataset.id;
                        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?')) {
                            fetch(`http://localhost:5000/api/feedback/${id}`, { method: 'DELETE' })
                                .then(res => res.json())
                                .then(result => {
                                    if (result.success) {
                                        loadFeedbacks();
                                    } else {
                                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                                    }
                                });
                        }
                    });
                });
            });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π) –≤ —Ç–∞–±–ª–∏—Ü—É
    async function loadBookings() {
        const response = await fetch('http://localhost:5000/api/bookings');
        const bookings = await response.json();
        const bookingsTab = document.getElementById('bookings-tab');
        let table = bookingsTab.querySelector('table');
        if (!table) {
            table = document.createElement('table');
            table.className = 'data-table';
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>–ö–ª–∏–µ–Ω—Ç</th>
                        <th>–£—Å–ª—É–≥–∞</th>
                        <th>–î–∞—Ç–∞</th>
                        <th>–í—Ä–µ–º—è</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody id="bookings-table-body"></tbody>
            `;
            bookingsTab.appendChild(table);
        }
        const tbody = table.querySelector('#bookings-table-body');
        if (!bookings || bookings.length === 0) {
            tbody.innerHTML = '<tr><td colspan="6">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</td></tr>';
            return;
        }
        const statusOptions = [
            { value: 'pending', label: '–í –æ–∂–∏–¥–∞–Ω–∏–∏' },
            { value: 'confirmed', label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' },
            { value: 'completed', label: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' },
            { value: 'cancelled', label: '–û—Ç–º–µ–Ω–µ–Ω–∞' }
        ];
        tbody.innerHTML = bookings.map(b => `
            <tr>
                <td>${b.customer_name || ''}</td>
                <td>${b.service_name || ''}</td>
                <td>${b.booking_date || ''}</td>
                <td>${b.start_time || ''} - ${b.end_time || ''}</td>
                <td>
                    <select class="booking-status-select" data-id="${b.id}">
                        ${statusOptions.map(opt => `<option value="${opt.value}"${b.status === opt.value ? ' selected' : ''}>${opt.label}</option>`).join('')}
                    </select>
                </td>
                <td><button class="btn-delete-booking" data-id="${b.id}">–£–¥–∞–ª–∏—Ç—å</button></td>
            </tr>
        `).join('');
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
        tbody.querySelectorAll('.btn-delete-booking').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.dataset.id;
                if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
                    fetch(`http://localhost:5000/api/bookings/${id}`, { method: 'DELETE' })
                        .then(res => res.json())
                        .then(result => {
                            if (result.success) {
                                loadBookings();
                            } else {
                                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                            }
                        });
                }
            });
        });
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        tbody.querySelectorAll('.booking-status-select').forEach(select => {
            select.addEventListener('change', function() {
                const id = this.dataset.id;
                const newStatus = this.value;
                fetch(`http://localhost:5000/api/bookings/${id}/status`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: newStatus })
                })
                .then(res => res.json())
                .then(result => {
                    if (!result.success) {
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                        loadBookings();
                    }
                });
            });
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ API
    function initDeleteButtons(services) {
        document.querySelectorAll('.btn-delete').forEach(btn => {
            btn.addEventListener('click', () => {
                const id = btn.dataset.id;
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?')) {
                    fetch(`http://localhost:5000/api/services/${id}`, { method: 'DELETE' })
                        .then(res => res.json())
                        .then(result => {
                            if (result.success) {
                                loadServices();
                            } else {
                                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                            }
                        });
                }
            });
        });
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ API
    function initEditButtons(services) {
        document.querySelectorAll('.btn-edit').forEach(btn => {
            btn.addEventListener('click', () => {
                const service = services.find(s => s.id === parseInt(btn.dataset.id));
                openServiceModal(service);
            });
        });
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    function openServiceModal(service = null) {
        const modal = document.getElementById('service-modal');
        const form = document.getElementById('service-form');
        if (service) {
            form.dataset.id = service.id;
            document.getElementById('modal-service-name').value = service.name;
            document.getElementById('modal-service-price').value = service.base_price;
            document.getElementById('modal-service-category').value = service.category;
            document.getElementById('modal-service-description').value = service.description || '';
            document.getElementById('modal-service-duration').value = service.duration || 1;
            document.querySelector('.modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É';
        } else {
            form.reset();
            form.removeAttribute('data-id');
            document.querySelector('.modal-title').textContent = '–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É';
        }
        modal.style.display = 'flex';
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ API
    document.getElementById('service-form').addEventListener('submit', async e => {
        e.preventDefault();
        const form = e.target;
        const id = form.dataset.id;
        const name = document.getElementById('modal-service-name').value;
        const price = parseFloat(document.getElementById('modal-service-price').value);
        const category = document.getElementById('modal-service-category').value;
        const description = document.getElementById('modal-service-description').value;
        const duration = parseInt(document.getElementById('modal-service-duration').value) || 1;
        // –ü–æ–ª—É—á–∞–µ–º category_id –ø–æ slug
        const categories = {
            wash: 1,
            polish: 2,
            coating: 3,
            interior: 4
        };
        const category_id = categories[category];
        const payload = {
            service_name: name,
            base_price: price,
            category_id: category_id,
            description: description,
            duration_minutes: duration * 60
        };
        if (id) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await fetch(`http://localhost:5000/api/services/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
            await fetch('http://localhost:5000/api/services', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
        }
        loadServices();
        document.getElementById('service-modal').style.display = 'none';
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.querySelector('.modal-close').addEventListener('click', () => {
        document.getElementById('service-modal').style.display = 'none';
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', (e) => {
        const modal = document.getElementById('service-modal');
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initTabs();
    loadServices();
    window.historyManager.initHistoryFilters();

    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É"
    document.getElementById('add-service').addEventListener('click', () => {
        openServiceModal();
    });
});